@page "/start-chat"
@using ChatApp.Domain.Entities
@using ChatApp.UI.Services
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject SignalRService SignalRService

@* <h3 class="text-xl font-bold mb-4">Chat Box</h3> *@

<style>
    /* Chat Box Container */
    .chat-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 320px;
        background: white;
        box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        border: 1px solid #ddd;
        display: flex;
        flex-direction: column;
        transition: height 0.3s ease-in-out;
    }

    /* Minimized Chat */
    .chat-minimized {
        height: 40px;
        overflow: hidden;
    }

    /* Chat Header */
    .chat-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: #2563eb;
        color: white;
        padding: 10px;
        border-radius: 8px 8px 0 0;
        cursor: pointer;
    }

    /* Chat Messages (Scrollable) */
    .chat-messages {
        height: 250px;
        overflow-y: auto;
        padding: 10px;
        background: #f7f7f7;
        border-bottom: 1px solid #ddd;
    }

    /* Message Container */
    .chat-message {
        display: flex;
        align-items: center;
        gap: 6px;
        margin-bottom: 8px;
    }

    /* User Icon */
    .user-icon {
        width: 24px;
        height: 24px;
        background: #ccc;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
    }

    /* Chat Bubble */
    .chat-bubble {
        padding: 8px 12px;
        border-radius: 12px;
        font-size: 14px;
        max-width: 80%;
    }

    /* User Message */
    .user-message {
        background: #2563eb;
        color: white;
        align-self: flex-end;
    }

    /* Other User Message */
    .other-message {
        background: #E5E7EB;
        color: black;
    }

    /* Chat Input */
    .chat-input {
        padding: 10px;
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

        /* Input Fields */
        .chat-input input {
            width: 100%;
            padding: 8px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

    /* Send Button */
    .send-button {
        width: 100%;
        background: #2563eb;
        color: white;
        font-size: 14px;
        padding: 8px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .send-button:hover {
            background: #1e4db7;
        }
</style>

<div>
    <label>Number of Chats:</label>
    <input type="number" @bind="ChatCount" min="1" max="100" />
    <button class="btn btn-primary" @onclick="SimulateChatSessions">Send Chat Simulation</button>
</div>
<div>
    <ul>
        @foreach (var status in SimulationNotificatios)
        {
            <li>@status</li>
        }
    </ul>
</div>

<!-- Chat Box -->
<div class="chat-container @(IsMinimized ? "chat-minimized" : "")">

    <!-- Chat Header (Click to Minimize/Maximize) -->
    <div class="chat-header" @onclick="ToggleChat">
        <span>Chat</span>
        <button style="background: transparent; border: none; color: white; cursor: pointer;">
            @if (IsMinimized)
            {
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
                    <path fill-rule="evenodd" d="M5 15l7-7 7 7H5z" clip-rule="evenodd" />
                </svg> <!-- Expand Icon -->
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
                    <path fill-rule="evenodd" d="M19 9l-7 7-7-7h14z" clip-rule="evenodd" />
                </svg> <!-- Collapse Icon -->
            }
        </button>
    </div>

    @if (!IsMinimized)
    {
        <!-- Chat Messages (Scrollable) -->
        <div class="chat-messages">
            @if (ChatSessions.Count != 0)
            {
                @foreach (var message in ChatSessions)
                {
                    <div class="chat-message">
                        <!-- User Icon -->
                        <div class="user-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-gray-600" viewBox="0 0 24 24" fill="currentColor">
                                <path fill-rule="evenodd" d="M12 2a5 5 0 015 5v2a5 5 0 11-10 0V7a5 5 0 015-5zm-6 17a6 6 0 1112 0H6z" clip-rule="evenodd" />
                            </svg>
                        </div>

                        <!-- Chat Bubble -->
                        <div class="chat-bubble @(Input.UserName == message.UserName ? "user-message" : "other-message")">
                            <strong>@message.UserName:</strong> @message.Message
                        </div>

                        <!-- Notifications -->
                        @if (Notifications.TryGetValue(chatSession.ChatSessionId.ToString(), out var notification))
                        {
                            <div class="notification other-message">
                                🔔 @notification
                            </div>
                        }

                        @*                         @if (messages.Any())
                        {
                            <div class="chat-bubble @(Input.UserName == message.UserName ? "user-message" : "other-message")">
                                @foreach (var note in messages)
                                {
                                    <div class="notification">@note</div>
                                }
                            </div>
                        } *@
                    </div>
                }
            }
        </div>

        <!-- Chat Input Form -->
        <EditForm Model="Input" OnValidSubmit="StartChat" class="chat-input">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 text-xs" />

            <InputText @bind-Value="Input.UserName" id="Input.UserName" class="w-full" placeholder="Enter your name" />
            <InputText @bind-Value="Input.Message" id="Input.Message" class="w-full" placeholder="Enter your message..." />

            <button type="submit" class="send-button">Send</button>
        </EditForm>
    }
</div>


@code {
    private ChatSession chatSession = new();
    // private ChatSession chatSession = new ChatSession { UserName = "Test", Status = "Pending" };
    // private string UserName = string.Empty;
    private string NotificationMessage = string.Empty;
    private Dictionary<string, string> Notifications = new(); // Stores notifications separately

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private List<ChatSession> ChatSessions = new();
    private List<string> messages = new();
    private List<string> SimulationNotificatios = new();
    private int ChatCount = 10;


    private bool IsMinimized = false;

    private void ToggleChat()
    {
        IsMinimized = !IsMinimized;
    }

    protected override async Task OnInitializedAsync()
    {
        SignalRService.OnMessageReceived += (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);  // Ensures UI updates in real-time
        };

        //  SignalRService.OnNotificationReceived += (chatSessionId, message) =>
        // {
        //     var encodedMsg = $"{chatSessionId}: {message}";
        //     messages.Add(encodedMsg);
        //     InvokeAsync(StateHasChanged);
        // };

        SignalRService.OnNotificationReceived += (chatSessionId, message) =>
         {
             Notifications[chatSessionId] = message;
             InvokeAsync(StateHasChanged);
         };

        await SignalRService.StartConnection();

        await LoadAllMessages();
    }

    private void OnMessageReceived(string message)
    {
        NotificationMessage = message;
        InvokeAsync(StateHasChanged);
    }

    private async Task StartChat()
    {
        if (string.IsNullOrWhiteSpace(Input.UserName))
        {
            NotificationMessage = "Please enter your name.";
            return;
        }

        if (string.IsNullOrWhiteSpace(Input.Message))
        {
            NotificationMessage = "Please enter your message.";
            return;
        }

        chatSession.UserName = Input.UserName;
        chatSession.Message = Input.Message;

        var response = await Http.PostAsJsonAsync("api/chat", chatSession);

        if (response.IsSuccessStatusCode)
        {
            await SignalRService.SendMessage(chatSession.UserName, chatSession.Message);
            Input.Message = string.Empty;
            await LoadAllMessages();
            NotificationMessage = "Chat started successfully!";

        }
        else
        {
            NotificationMessage = "Failed to start chat.";
        }
    }

    private async Task SimulateChatSessions()
    {
        for (int i = 1; i <= ChatCount; i++)
        {
            var chatSession = new ChatSession
                {
                    Id = i,
                    UserName = $"User{i}",
                    Message = $"Test message {i}",
                    Status = Domain.Enum.Enum.ChatStatus.Pending,
                    CreatedAt = DateTime.UtcNow
                };

            var response = await Http.PostAsJsonAsync("api/chat", chatSession);

            if (response.IsSuccessStatusCode)
            {
                await SignalRService.SendMessage(chatSession.UserName, chatSession.Message);
                SimulationNotificatios.Add($"✅ Chat simulation {i} created successfully!");
            }
            else
            {
                SimulationNotificatios.Add($"❌ Failed to create chat simulation {i}.");
            }

            await Task.Delay(200); // Small delay to simulate real user input
        }

        await LoadAllMessages();
    }

    private async Task LoadAllMessages()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<ChatSession>>("api/chat/all");

            if (response != null)
            {
                ChatSessions = response.OrderBy(m => m.CreatedAt).ToList();
            }
        }
        catch (HttpRequestException ex)
        {
            NotificationMessage = $"Error fetching chats: {ex.Message}";
        }
        catch (Exception ex)
        {
            NotificationMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    private sealed class InputModel
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Name is required.")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Message is required.")]
        public string Message { get; set; }

        public string Status { get; set; } = "Pending"; // Pending, Assigned, Completed
        public int? AssignedAgentId { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime? LastPolledAt { get; set; }
    }
}
