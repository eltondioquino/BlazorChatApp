@page "/chat-assigned-to-agent"
@using ChatApp.Domain.Entities
@using ChatApp.UI.Services
@inject HttpClient Http
@inject SignalRService SignalRService

<h3>Chat Assigned To Agent</h3>

<!-- Dropdown to Select Agent -->
<select class="form-select mb-3" @onchange="OnAgentSelectionChanged" value="@SelectedAgentId">
    <option value="">-- Select Agent --</option>
    @foreach (var agent in Agents)
    {
        <option value="@agent.Id">@agent.Name</option>
    }
</select>

<!-- Chat Table -->
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>NAME</th>
            <th>MESSAGE</th>
            <th>STATUS</th>
            <th>TIMESTAMP</th>
            <th>UPDATE STATUS</th> <!-- Added Update Status Column -->
        </tr>
    </thead>
    <tbody>
        @foreach (var chat in FilteredChats)
        {
            <tr>
                <td>@chat.ChatSessionId</td>
                <td>@chat.UserName</td>
                <td>@chat.Message</td>
                <td>@chat.Status</td>
                <td>@chat.CreatedAt</td>
                @* <td><button class="btn btn-primary" @onclick="() => UpdateStatusToInProgress(chat.ChatSessionId)">Mark as In Progress</button></td> <!-- Button to Update Status --> *@
                <td>
                    <button class="btn @(chat.Status == Domain.Enum.Enum.ChatStatus.Completed ? "btn-success" : "btn-primary")" @onclick="() => UpdateChatStatus(chat)">
                        @(chat.Status == Domain.Enum.Enum.ChatStatus.Completed ? "Completed" : chat.Status == Domain.Enum.Enum.ChatStatus.Inprogress ? "Mark as Completed" : "Mark as In Progress")
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<p>@NotificationMessage</p>

@code {
    private List<ChatSession> Chats = new();
    private List<ChatSession> FilteredChats = new();
    private List<Agent> Agents = new(); // List of Agents
    private int? SelectedAgentId;
    private string NotificationMessage;
    private List<string> messages = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Initializing...");

        await LoadChats();
        await LoadAgents(); // Load list of agents
        SignalRService.OnMessageReceived += (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);  // Ensures UI updates in real-time
        };

        await SignalRService.StartConnection();

        Console.WriteLine("Initialization complete.");
    }

    private async Task LoadChats()
    {
        try
        {
            Console.WriteLine("Loading chats...");
            var result = await Http.GetFromJsonAsync<List<ChatSession>>("api/chat/all");
            if (result != null)
            {
                Chats = result;
                Console.WriteLine($"Loaded {Chats.Count} chats.");
                FilterChatsByAgent();
            }
            else
            {
                Console.WriteLine("No chats returned.");
            }
        }
        catch (Exception ex)
        {
            NotificationMessage = $"Error fetching chats: {ex.Message}";
        }
    }

    private async Task LoadAgents()
    {
        try
        {
            Console.WriteLine("Loading agents...");
            var result = await Http.GetFromJsonAsync<List<Agent>>("api/agent/");
            if (result != null)
            {
                Agents = result;
                Console.WriteLine($"Loaded {Agents.Count} agents.");
            }
            else
            {
                Console.WriteLine("No agents returned.");
            }
        }
        catch (Exception ex)
        {
            NotificationMessage = $"Error fetching agents: {ex.Message}";
        }
    }

    private void FilterChatsByAgent()
    {
        Console.WriteLine("Filtering chats by agent...");
        FilteredChats = SelectedAgentId.HasValue
            ? Chats.Where(chat => chat.AssignedAgentId == SelectedAgentId).ToList()
            : Chats; // Show all chats if no agent is selected
        StateHasChanged(); // Force re-render after filtering
    }

    private void MessageReceived(string message)
    {
        Console.WriteLine($"Message received: {message}");
        NotificationMessage = message;
        InvokeAsync(async () =>
        {
            await LoadChats();
            StateHasChanged();
        });
    }

    private void OnAgentSelectionChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        Console.WriteLine($"Dropdown changed, selected value: {selectedValue}");

        if (int.TryParse(selectedValue, out var agentId))
        {
            Console.WriteLine($"Selected Agent ID: {agentId}");
            SelectedAgentId = agentId;
        }
        else
        {
            Console.WriteLine("No agent selected, showing all chats.");
            SelectedAgentId = null; // Show all chats if nothing is selected
        }

        FilterChatsByAgent();
    }

    private async Task UpdateChatStatus(ChatSession chat)
    {
        if (chat.Status == Domain.Enum.Enum.ChatStatus.Assigned)
        {
            chat.Status = Domain.Enum.Enum.ChatStatus.Inprogress;
        }
        else if (chat.Status == Domain.Enum.Enum.ChatStatus.Inprogress)
        {
            chat.Status = Domain.Enum.Enum.ChatStatus.Completed;
        }
        else if (chat.Status == Domain.Enum.Enum.ChatStatus.Completed)
        {
            chat.Status = Domain.Enum.Enum.ChatStatus.Inprogress;
        }

        var response = await Http.PutAsJsonAsync("api/chat/updatechatstatus", chat);
        if (response.IsSuccessStatusCode)
        {
            NotificationMessage = $"Status updated to {chat.Status}";
            await LoadChats();
        }
        else
        {
            NotificationMessage = "Error updating status.";
        }

        StateHasChanged();
    }
}
