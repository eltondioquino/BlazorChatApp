@page "/chat-assigned-to-agent"
@using ChatApp.Domain.Entities
@using ChatApp.UI.Services
@inject HttpClient Http
@inject SignalRService SignalRService

<h3>Chat Assigned To Agent</h3>

<!-- Agent Dropdown -->
<select class="form-select mb-3" @onchange="OnAgentSelectionChanged">
    <option value="">-- Select Agent --</option>
    @foreach (var agent in Agents)
    {
        <option value="@agent.Id">@agent.Name</option>
    }
</select>

<!-- Status Dropdown -->
<select class="form-select mb-3" @onchange="OnStatusSelectionChanged">
    <option value="">-- Select Status --</option>
    @foreach (var status in Enum.GetValues(typeof(Domain.Enum.Enum.ChatStatus)).Cast<Domain.Enum.Enum.ChatStatus>())
    {
        <option value="@status">@status</option>
    }
</select>

<!-- Chat Table -->
<table class="table">
    <thead>
        <tr>
            <th @onclick="() => SortTable(nameof(ChatSession.ChatSessionId))">ID ⬍</th>
            <th @onclick="() => SortTable(nameof(ChatSession.UserName))">NAME ⬍</th>
            <th @onclick="() => SortTable(nameof(ChatSession.Message))">MESSAGE ⬍</th>
            <th @onclick="() => SortTable(nameof(ChatSession.Status))">STATUS ⬍</th>
            <th @onclick="() => SortTable(nameof(ChatSession.CreatedAt))">TIMESTAMP ⬍</th>
            <th>UPDATE STATUS</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var chat in FilteredChats)
        {
            <tr>
                <td>@chat.ChatSessionId</td>
                <td>@chat.UserName</td>
                <td>@chat.Message</td>
                <td>@chat.Status</td>
                <td>@chat.CreatedAt</td>
                <td>
                    <button class="btn
                        @(chat.Status == Domain.Enum.Enum.ChatStatus.Completed ? "btn-success" :
                        chat.Status == Domain.Enum.Enum.ChatStatus.Inprogress ? "btn-warning" :
                        chat.Status == Domain.Enum.Enum.ChatStatus.UnAssigned ? "btn-secondary" :
                        "btn-primary")"
                            @onclick="() => UpdateChatStatus(chat)">
                        @(chat.Status == Domain.Enum.Enum.ChatStatus.Completed
                            ? "Completed"
                            : chat.Status == Domain.Enum.Enum.ChatStatus.Inprogress
                            ? "Mark as Completed"
                            : chat.Status == Domain.Enum.Enum.ChatStatus.UnAssigned
                            ? "Assign to Agent"
                            : "Mark as In Progress")
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<p>@NotificationMessage</p>

@code {
    private List<ChatSession> Chats = new();
    private List<ChatSession> FilteredChats = new();
    private List<Agent> Agents = new();
    private int? SelectedAgentId;
    private Domain.Enum.Enum.ChatStatus? SelectedStatus;
    private string NotificationMessage;
    private List<string> messages = new();

    private string SortColumn = nameof(ChatSession.CreatedAt); // Default sort by date
    private bool SortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
        await LoadChats();

        SignalRService.OnMessageReceived += (user, message) =>
        {
            messages.Add($"{user}: {message}");
            InvokeAsync(StateHasChanged);
        };

        await SignalRService.StartConnection();
    }

    private async Task UpdateChatStatus(ChatSession chat)
    {
        if (chat.Status == Domain.Enum.Enum.ChatStatus.UnAssigned)
        {
            // Logic to assign the chat to an agent
            return;
        }

        if (chat.Status == Domain.Enum.Enum.ChatStatus.Assigned)
        {
            chat.Status = Domain.Enum.Enum.ChatStatus.Inprogress;
        }
        else if (chat.Status == Domain.Enum.Enum.ChatStatus.Inprogress)
        {
            chat.Status = Domain.Enum.Enum.ChatStatus.Completed;
        }
        else if (chat.Status == Domain.Enum.Enum.ChatStatus.Completed)
        {
            chat.Status = Domain.Enum.Enum.ChatStatus.Inprogress;
        }

        var response = await Http.PutAsJsonAsync("api/chat/updatechatstatus", chat);
        if (response.IsSuccessStatusCode)
        {

            var agent = await Http.PutAsJsonAsync("api/agent/concurrentchat", chat);
            

            NotificationMessage = $"Status updated to {chat.Status}";
            await LoadChats();  // Refresh the chat list
        }
        else
        {
            NotificationMessage = "Error updating status.";
        }

        StateHasChanged();
    }

    private async Task LoadChats()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<ChatSession>>("api/chat/all");
            if (result != null)
            {
                Chats = result;
                FilterChatsAndSort();  // Apply filtering + sorting after loading
            }
        }
        catch (Exception ex)
        {
            NotificationMessage = $"Error fetching chats: {ex.Message}";
        }
    }

    private async Task LoadAgents()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<Agent>>("api/agent/");
            if (result != null)
            {
                Agents = result;
            }
        }
        catch (Exception ex)
        {
            NotificationMessage = $"Error fetching agents: {ex.Message}";
        }
    }

    private void FilterChatsAndSort()
    {
        // Apply filters
        FilteredChats = Chats
            .Where(chat => (!SelectedAgentId.HasValue || chat.AssignedAgentId == SelectedAgentId))
            .Where(chat => (!SelectedStatus.HasValue || chat.Status == SelectedStatus))
            .ToList();

        // Apply sorting
        if (!string.IsNullOrEmpty(SortColumn))
        {
            if (SortAscending)
            {
                FilteredChats = FilteredChats.OrderBy(chat => GetPropertyValue(chat, SortColumn)).ToList();
            }
            else
            {
                FilteredChats = FilteredChats.OrderByDescending(chat => GetPropertyValue(chat, SortColumn)).ToList();
            }
        }

        StateHasChanged(); // Refresh UI
    }

    private object GetPropertyValue(ChatSession chat, string propertyName)
    {
        var property = typeof(ChatSession).GetProperty(propertyName);
        return property?.GetValue(chat, null) ?? "";
    }

    private void OnAgentSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var agentId))
        {
            SelectedAgentId = agentId;
        }
        else
        {
            SelectedAgentId = null;
        }

        FilterChatsAndSort();
    }

    private void OnStatusSelectionChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<Domain.Enum.Enum.ChatStatus>(e.Value?.ToString(), out var status))
        {
            SelectedStatus = status;
        }
        else
        {
            SelectedStatus = null;
        }

        FilterChatsAndSort();
    }

    private void SortTable(string columnName)
    {
        if (SortColumn == columnName)
        {
            SortAscending = !SortAscending;  // Toggle sorting order
        }
        else
        {
            SortColumn = columnName;
            SortAscending = true;
        }

        FilterChatsAndSort();
    }
}
